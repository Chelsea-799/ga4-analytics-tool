#!/usr/bin/env python3
"""
GA4 Analyzer UI - Giao di·ªán web cho tool ph√¢n t√≠ch GA4
"""

import streamlit as st
import json
import os
import pandas as pd
from openai import OpenAI
from google.analytics.data_v1beta import BetaAnalyticsDataClient
from google.analytics.data_v1beta.types import (
    DateRange,
    Metric,
    Dimension,
    RunReportRequest
)
from google.oauth2 import service_account
import tempfile

# C·∫•u h√¨nh OpenAI API key (ng∆∞·ªùi d√πng ph·∫£i nh·∫≠p)
DEFAULT_OPENAI_API_KEY = ""

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="GA4 Analyzer",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

def get_ga4_client(credentials_file):
    """T·∫°o GA4 client t·ª´ credentials file"""
    try:
        credentials = service_account.Credentials.from_service_account_file(credentials_file)
        client = BetaAnalyticsDataClient(credentials=credentials)
        return client
    except Exception as e:
        st.error(f"‚ùå L·ªói t·∫°o GA4 client: {e}")
        return None

def fetch_basic_metrics(client, property_id, days=30):
    """L·∫•y c√°c ch·ªâ s·ªë c∆° b·∫£n t·ª´ GA4"""
    try:
        request = RunReportRequest(
            property=f"properties/{property_id}",
            dimensions=[Dimension(name="date")],
            metrics=[
                Metric(name="totalUsers"),
                Metric(name="sessions"),
                Metric(name="screenPageViews"),
                Metric(name="transactions"),
                Metric(name="totalRevenue")
            ],
            date_ranges=[DateRange(start_date=f"{days}daysAgo", end_date="today")]
        )

        response = client.run_report(request)
        
        rows = []
        for row in response.rows:
            record = {
                "date": row.dimension_values[0].value,
                "totalUsers": int(row.metric_values[0].value),
                "sessions": int(row.metric_values[1].value),
                "screenPageViews": int(row.metric_values[2].value),
                "transactions": int(row.metric_values[3].value),
                "totalRevenue": float(row.metric_values[4].value)
            }
            rows.append(record)

        return pd.DataFrame(rows)
    except Exception as e:
        st.error(f"‚ùå L·ªói l·∫•y d·ªØ li·ªáu c∆° b·∫£n: {e}")
        return pd.DataFrame()

def test_openai_api(api_key=None):
    """Test OpenAI API key"""
    if not api_key:
        api_key = st.session_state.get('openai_api_key', DEFAULT_OPENAI_API_KEY)
    
    try:
        from openai import OpenAI
        client = OpenAI(api_key=api_key)
        response = client.chat.completions.create(
            model="gpt-4o",  # S·ª≠ d·ª•ng GPT-4o (OpenAI 4.0)
            messages=[{"role": "user", "content": "Test"}],
            max_tokens=5
        )
        return True
    except Exception as e:
        st.error(f"‚ùå OpenAI API key kh√¥ng h·ª£p l·ªá: {e}")
        return False

def fetch_product_views(client, property_id, days=30):
    """L·∫•y d·ªØ li·ªáu view s·∫£n ph·∫©m t·ª´ GA4 - d·ª±a tr√™n page title"""
    try:
        # Request l·∫•y d·ªØ li·ªáu view theo page title
        views_request = RunReportRequest(
            property=f"properties/{property_id}",
            dimensions=[
                Dimension(name="pageTitle")
            ],
            metrics=[
                Metric(name="screenPageViews")
            ],
            date_ranges=[DateRange(start_date=f"{days}daysAgo", end_date="today")]
        )

        views_response = client.run_report(views_request)
        
        # X·ª≠ l√Ω d·ªØ li·ªáu view
        views_data = {}
        for row in views_response.rows:
            page_title = row.dimension_values[0].value
            page_views = int(row.metric_values[0].value)
            
            # Hi·ªÉn th·ªã t·∫•t c·∫£ c√°c trang c√≥ d·ªØ li·ªáu view
            if (page_title and 
                page_title not in ['(not set)', '(not provided)']):
                
                # S·ª≠ d·ª•ng page title l√†m t√™n s·∫£n ph·∫©m
                product_name = page_title
                
                if product_name not in views_data:
                    views_data[product_name] = {
                        'views': page_views,
                        'pageViews': page_views
                    }
                else:
                    views_data[product_name]['views'] += page_views
                    views_data[product_name]['pageViews'] += page_views
        
        # Chuy·ªÉn th√†nh DataFrame
        if views_data:
            views_list = []
            for product_name, data in views_data.items():
                views_list.append({
                    'itemName': product_name,
                    'views': data['views'],
                    'pageViews': data['pageViews']
                })
            
            df = pd.DataFrame(views_list)
            return df
        else:
            return pd.DataFrame()
            
    except Exception as e:
        st.error(f"‚ùå L·ªói l·∫•y d·ªØ li·ªáu view s·∫£n ph·∫©m: {e}")
        return pd.DataFrame()

# H√†m create_summary_charts ƒë√£ ƒë∆∞·ª£c x√≥a v√¨ kh√¥ng c·∫ßn thi·∫øt

def fetch_product_performance(client, property_id, days=30):
    """L·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ GA4"""
    try:
        # Request 1: L·∫•y events theo eventName
        events_request = RunReportRequest(
            property=f"properties/{property_id}",
            dimensions=[Dimension(name="eventName")],
            metrics=[Metric(name="eventCount")],
            date_ranges=[DateRange(start_date=f"{days}daysAgo", end_date="today")]
        )

        events_response = client.run_report(events_request)
        
        # X·ª≠ l√Ω d·ªØ li·ªáu events
        events_data = {}
        for row in events_response.rows:
            event_name = row.dimension_values[0].value
            event_count = int(row.metric_values[0].value)
            if event_name in ['purchase', 'add_to_cart', 'begin_checkout']:
                events_data[event_name] = event_count
        
        # Request 2: L·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m v·ªõi revenue
        products_request = RunReportRequest(
            property=f"properties/{property_id}",
            dimensions=[Dimension(name="itemName")],
            metrics=[
                Metric(name="itemRevenue"),
                Metric(name="itemPurchaseQuantity")
            ],
            date_ranges=[DateRange(start_date=f"{days}daysAgo", end_date="today")]
        )

        products_response = client.run_report(products_request)
        
        # X·ª≠ l√Ω d·ªØ li·ªáu s·∫£n ph·∫©m
        products_data = []
        for row in products_response.rows:
            item_name = row.dimension_values[0].value
            revenue = float(row.metric_values[0].value)
            quantity = int(row.metric_values[1].value) if row.metric_values[1].value else 0
            
            # B·ªè ƒëi·ªÅu ki·ªán revenue > 0 ƒë·ªÉ hi·ªÉn th·ªã t·∫•t c·∫£ s·∫£n ph·∫©m c√≥ view
            if item_name:
                products_data.append({
                    'itemName': item_name,
                    'itemRevenue': revenue,
                    'itemPurchaseQuantity': quantity,
                    'transactions': quantity,  # S·ªë l∆∞·ª£ng = s·ªë giao d·ªãch
                    'addToCarts': events_data.get('add_to_cart', 0),  # ∆Ø·ªõc t√≠nh t·ª´ t·ªïng
                    'beginCheckouts': events_data.get('begin_checkout', 0),  # ∆Ø·ªõc t√≠nh t·ª´ t·ªïng
                    'ecommercePurchases': events_data.get('purchase', 0),  # ∆Ø·ªõc t√≠nh t·ª´ t·ªïng
                    'eventCount': events_data.get('purchase', 0),  # T·ªïng events
                    'itemCategory': 'General'
                })
        
        # K·∫øt h·ª£p v·ªõi d·ªØ li·ªáu view t·ª´ page title
        views_df = fetch_product_views(client, property_id, days)
        
        if products_data:
            df = pd.DataFrame(products_data)
            
            # N·∫øu c√≥ d·ªØ li·ªáu view, merge v√†o
            if not views_df.empty:
                # Merge d·ªØ li·ªáu view v√†o products
                df = df.merge(views_df, on='itemName', how='outer')
                # Fill NaN values
                df['views'] = df['views'].fillna(0)
                df['pageViews'] = df['pageViews'].fillna(0)
                df['itemRevenue'] = df['itemRevenue'].fillna(0)
                df['transactions'] = df['transactions'].fillna(0)
                df['itemPurchaseQuantity'] = df['itemPurchaseQuantity'].fillna(0)
                df['eventCount'] = df['eventCount'].fillna(0)
                df['ecommercePurchases'] = df['ecommercePurchases'].fillna(0)
                df['addToCarts'] = df['addToCarts'].fillna(0)
                df['beginCheckouts'] = df['beginCheckouts'].fillna(0)
                df['itemCategory'] = df['itemCategory'].fillna('General')
            
            return df
        elif not views_df.empty:
            # N·∫øu kh√¥ng c√≥ products nh∆∞ng c√≥ views, s·ª≠ d·ª•ng views data
            st.info("üí° Hi·ªÉn th·ªã d·ªØ li·ªáu t·ª´ page views (ch∆∞a c√≥ giao d·ªãch)")
            views_df['itemRevenue'] = 0
            views_df['transactions'] = 0
            views_df['itemPurchaseQuantity'] = 0
            views_df['eventCount'] = 0
            views_df['ecommercePurchases'] = 0
            views_df['addToCarts'] = 0
            views_df['beginCheckouts'] = 0
            views_df['itemCategory'] = 'Page Views'
            return views_df
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m")
            # Tr·∫£ v·ªÅ DataFrame r·ªóng v·ªõi gi√° tr·ªã 0
            empty_df = pd.DataFrame({
                'itemName': ['No Products'],
                'itemRevenue': [0.0],
                'transactions': [0],
                'itemPurchaseQuantity': [0],
                'eventCount': [0],
                'ecommercePurchases': [0],
                'addToCarts': [0],
                'beginCheckouts': [0],
                'itemCategory': ['No Category']
            })
            return empty_df
        
    except Exception as e:
        st.error(f"‚ùå L·ªói l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m: {e}")
        # Tr·∫£ v·ªÅ DataFrame v·ªõi gi√° tr·ªã 0
        error_df = pd.DataFrame({
            'itemName': ['Error - No Data'],
            'itemRevenue': [0.0],
            'transactions': [0],
            'itemPurchaseQuantity': [0],
            'eventCount': [0],
            'ecommercePurchases': [0],
            'addToCarts': [0],
            'beginCheckouts': [0],
            'itemCategory': ['Error']
        })
        return error_df

def main():
    """H√†m ch√≠nh"""
    st.title("üîç GA4 Analyzer - Tool ph√¢n t√≠ch GA4")
    st.markdown("---")
    
    # Sidebar cho c·∫•u h√¨nh
    with st.sidebar:
        st.header("‚öôÔ∏è C·∫•u h√¨nh")
        
        # C·∫•u h√¨nh OpenAI API key
        st.subheader("ü§ñ OpenAI API Key (GPT-4o)")
        st.info("üöÄ Tool ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh ƒë·ªÉ s·ª≠ d·ª•ng GPT-4o (OpenAI 4.0)")
        st.warning("‚ö†Ô∏è API key l√† b·∫Øt bu·ªôc ƒë·ªÉ s·ª≠ d·ª•ng ph√¢n t√≠ch AI")
        
        # L·∫•y API key t·ª´ session state ho·∫∑c s·ª≠ d·ª•ng default
        openai_key = st.session_state.get('openai_api_key', DEFAULT_OPENAI_API_KEY)
        
        # Input cho API key
        new_api_key = st.text_input(
            "üîë OpenAI API Key (B·∫Øt bu·ªôc)", 
            value=openai_key,
            type="password",
            help="Nh·∫≠p OpenAI API key ƒë·ªÉ s·ª≠ d·ª•ng ph√¢n t√≠ch AI"
        )
        
        # Ki·ªÉm tra API key
        if not new_api_key or new_api_key.strip() == "":
            st.error("‚ùå Vui l√≤ng nh·∫≠p OpenAI API key ƒë·ªÉ s·ª≠ d·ª•ng ph√¢n t√≠ch AI")
            st.warning("üí° API key l√† b·∫Øt bu·ªôc ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng ph√¢n t√≠ch AI")
        else:
            st.success("‚úÖ API key ƒë√£ ƒë∆∞·ª£c nh·∫≠p")
        
        # H∆∞·ªõng d·∫´n l·∫•y API key
        with st.expander("üìñ H∆∞·ªõng d·∫´n l·∫•y OpenAI API Key"):
            st.markdown("""
            1. **Truy c·∫≠p:** https://platform.openai.com/account/api-keys
            2. **ƒêƒÉng nh·∫≠p** v√†o t√†i kho·∫£n OpenAI
            3. **T·∫°o API key m·ªõi** ho·∫∑c copy key c√≥ s·∫µn
            4. **Paste v√†o √¥ b√™n tr√™n**
            5. **Test API key** b·∫±ng n√∫t b√™n d∆∞·ªõi
            
            **üí° Tool ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh ƒë·ªÉ s·ª≠ d·ª•ng GPT-4o (OpenAI 4.0)**
            """)
        
        # C·∫≠p nh·∫≠t API key n·∫øu thay ƒë·ªïi
        if new_api_key != openai_key:
            st.session_state['openai_api_key'] = new_api_key
            st.success("‚úÖ API key ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!")
        
        # Test API key
        if st.button("üîë Test OpenAI API"):
            with st.spinner("üîÑ ƒêang test API key..."):
                if test_openai_api(new_api_key):
                    st.success("‚úÖ OpenAI API key ho·∫°t ƒë·ªông t·ªët!")
                else:
                    st.error("‚ùå OpenAI API key c√≥ v·∫•n ƒë·ªÅ!")
        
        st.markdown("---")
        
        # Ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠p credentials
        st.subheader("üìÅ Credentials")
        
        # Ki·ªÉm tra xem c√≥ store ƒë√£ ƒë∆∞·ª£c ch·ªçn t·ª´ Store Manager kh√¥ng
        selected_store = st.session_state.get('selected_store', None)
        
        if selected_store:
            ga4_property_id_selected = selected_store.get('ga4_property_id') or selected_store.get('property_id') or ""
            st.success(f"‚úÖ Store ƒë√£ ch·ªçn: {selected_store.get('store_name', 'N/A')}")
            st.info(f"üåê Domain: {selected_store.get('domain', 'N/A')}")
            st.info(f"üÜî Property ID: {ga4_property_id_selected}")
            
            if st.button("üîÑ Ch·ªçn store kh√°c"):
                del st.session_state['selected_store']
                st.rerun()
            
            # T·∫°o file credentials t·∫°m n·∫øu c√≥ n·ªôi dung credentials trong store
            credentials_path = None
            ga4_credentials_content = selected_store.get('ga4_credentials_content') or selected_store.get('credentials_content')
            if ga4_credentials_content:
                try:
                    with tempfile.NamedTemporaryFile(delete=False, suffix='.json', mode='w') as tmp_file:
                        tmp_file.write(ga4_credentials_content)
                        credentials_path = tmp_file.name
                except Exception:
                    credentials_path = None
            else:
                credentials_path = selected_store.get('credentials_path')
        else:
            st.info("üí° Ch∆∞a c√≥ store n√†o ƒë∆∞·ª£c ch·ªçn")
            st.markdown("**Ch·ªçn ph∆∞∆°ng th·ª©c:**")
            
            # Option 1: Upload file
            if st.checkbox("üìÅ Upload file credentials.json"):
                uploaded_file = st.file_uploader("Ch·ªçn file credentials.json", type=['json'], key="upload_analyzer")
                
                if uploaded_file is not None:
                    # L∆∞u file t·∫°m th·ªùi
                    with tempfile.NamedTemporaryFile(delete=False, suffix='.json') as tmp_file:
                        tmp_file.write(uploaded_file.getvalue())
                        credentials_path = tmp_file.name
                    st.success("‚úÖ File credentials ƒë√£ ƒë∆∞·ª£c upload")
                    st.info(f"üìÅ File: {credentials_path}")
                else:
                    credentials_path = None
            else:
                credentials_path = None
            
            # Option 2: Chuy·ªÉn sang Store Manager
            st.markdown("---")
            st.markdown("**Ho·∫∑c:**")
            if st.button("üè™ M·ªü Store Manager"):
                st.switch_page("pages/1_üè™_Store_Manager.py")
    
    # Main content
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.header("üìã Th√¥ng tin Store")
        
        # Form nh·∫≠p th√¥ng tin
        with st.form("store_info"):
            # T·ª± ƒë·ªông ƒëi·ªÅn th√¥ng tin t·ª´ store ƒë√£ ch·ªçn
            default_store_name = selected_store.get('store_name', "") if selected_store else ""
            default_domain = selected_store.get('domain', "") if selected_store else ""
            default_property_id = (
                (selected_store.get('ga4_property_id') or selected_store.get('property_id')) if selected_store else ""
            )
            
            store_name = st.text_input("üè™ T√™n store", value=default_store_name, placeholder="V√≠ d·ª•: Vinahomesvlas Store")
            domain = st.text_input("üåê Domain website", value=default_domain, placeholder="https://example.com")
            property_id = st.text_input("üÜî GA4 Property ID", value=default_property_id, placeholder="495167329")
            days = st.number_input("üìÖ S·ªë ng√†y ph√¢n t√≠ch", min_value=1, max_value=365, value=30)
            
            submitted = st.form_submit_button("üöÄ Ph√¢n t√≠ch d·ªØ li·ªáu")
    
    with col2:
        st.header("üìä H∆∞·ªõng d·∫´n")
        st.markdown("""
        1. **Upload file credentials.json** t·ª´ Google Analytics
        2. **Nh·∫≠p th√¥ng tin store** b√™n tr√°i
        3. **Nh·∫•n "Ph√¢n t√≠ch d·ªØ li·ªáu"**
        4. **Xem k·∫øt qu·∫£** b√™n d∆∞·ªõi
        5. **Ph√¢n t√≠ch AI** s·∫Ω t·ª± ƒë·ªông ch·∫°y
        """)
        
        st.info("ü§ñ Ph√¢n t√≠ch AI ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh s·∫µn")
    
    # X·ª≠ l√Ω khi submit form
    if submitted:
        if not all([store_name, domain, property_id, credentials_path]):
            st.error("‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin v√† upload file credentials")
            return
        
        # Hi·ªÉn th·ªã th√¥ng tin store
        st.markdown("---")
        st.header(f"üìä Ph√¢n t√≠ch GA4 - {store_name.upper()}")
        
        # Ki·ªÉm tra file credentials
        if not os.path.exists(credentials_path):
            st.error(f"‚ùå File credentials kh√¥ng t·ªìn t·∫°i: {credentials_path}")
            return
        
        # T·∫°o client
        with st.spinner("üîÑ ƒêang k·∫øt n·ªëi GA4..."):
            client = get_ga4_client(credentials_path)
            if not client:
                return
        
        st.success("‚úÖ K·∫øt n·ªëi GA4 th√†nh c√¥ng!")
        
        # L·∫•y d·ªØ li·ªáu
        with st.spinner("üìà ƒêang l·∫•y d·ªØ li·ªáu..."):
            df = fetch_product_performance(client, property_id, days)
            basic_df = fetch_basic_metrics(client, property_id, days)
            views_df = fetch_product_views(client, property_id, days)
        
        # Hi·ªÉn th·ªã ch·ªâ s·ªë c∆° b·∫£n
        if not basic_df.empty:
            total_users = basic_df['totalUsers'].sum()
            total_sessions = basic_df['sessions'].sum()
            total_views = basic_df['screenPageViews'].sum()
            total_transactions = basic_df['transactions'].sum()
            total_revenue = basic_df['totalRevenue'].sum()
            
            # T√≠nh to√°n metrics b·ªï sung
            conversion_rate = (total_transactions / total_sessions * 100) if total_sessions > 0 else 0
            avg_order_value = (total_revenue / total_transactions) if total_transactions > 0 else 0
            
            # Hi·ªÉn th·ªã metrics trong columns
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("üë• Users", f"{total_users:,}")
                st.metric("üîÑ Sessions", f"{total_sessions:,}")
            
            with col2:
                st.metric("üëÄ Page Views", f"{total_views:,}")
                st.metric("üõí Transactions", f"{total_transactions:,}")
            
            with col3:
                st.metric("üí∞ Revenue", f"${total_revenue:,.2f}")
                st.metric("üìä Conversion Rate", f"{conversion_rate:.2f}%")
            
            with col4:
                st.metric("üíµ Avg Order Value", f"${avg_order_value:.2f}")
                st.metric("üìÖ Th·ªùi gian", f"{days} ng√†y")
        else:
            st.warning("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu c∆° b·∫£n")
        
        # Hi·ªÉn th·ªã d·ªØ li·ªáu s·∫£n ph·∫©m
        if not df.empty and len(df) > 0 and df['itemName'].iloc[0] not in ['No Products', 'Error - No Data']:
            st.markdown("---")
            st.header("üì¶ D·ªØ li·ªáu s·∫£n ph·∫©m")
            
            # Th·ªëng k√™ t·ªïng quan
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("S·ªë s·∫£n ph·∫©m", len(df))
            with col2:
                st.metric("T·ªïng doanh thu", f"${df['itemRevenue'].sum():,.2f}")
            with col3:
                st.metric("T·ªïng giao d·ªãch", f"{df['transactions'].sum():,}")
            with col4:
                st.metric("T·ªïng events", f"{df['eventCount'].sum():,}")
            
            # Th√™m th·ªëng k√™ views n·∫øu c√≥
            if 'views' in df.columns:
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("T·ªïng views", f"{df['views'].sum():,}")
                with col2:
                    st.metric("T·ªïng page views", f"{df['pageViews'].sum():,}")
                with col3:
                    st.metric("S·∫£n ph·∫©m c√≥ view", len(df[df['views'] > 0]))
                with col4:
                    st.metric("S·∫£n ph·∫©m c√≥ giao d·ªãch", len(df[df['transactions'] > 0]))
            
            # B·∫£ng chi ti·∫øt s·∫£n ph·∫©m
            st.subheader("üìã Chi ti·∫øt s·∫£n ph·∫©m")
            display_columns = ['itemName', 'itemRevenue', 'transactions', 'itemPurchaseQuantity']
            if 'views' in df.columns:
                display_columns.extend(['views', 'pageViews'])
            display_columns.extend(['addToCarts', 'beginCheckouts', 'ecommercePurchases'])
            
            display_df = df[display_columns].copy()
            
            # T·∫°o t√™n c·ªôt t∆∞∆°ng ·ª©ng v·ªõi s·ªë c·ªôt th·ª±c t·∫ø
            column_names = ['T√™n s·∫£n ph·∫©m', 'Doanh thu', 'Giao d·ªãch', 'S·ªë l∆∞·ª£ng']
            if 'views' in df.columns:
                column_names.extend(['Views', 'Page Views'])
            column_names.extend(['Th√™m gi·ªè h√†ng', 'B·∫Øt ƒë·∫ßu checkout', 'Mua h√†ng'])
            
            # Ki·ªÉm tra s·ªë l∆∞·ª£ng c·ªôt
            if len(display_df.columns) == len(column_names):
                display_df.columns = column_names
                display_df['Doanh thu'] = display_df['Doanh thu'].round(2)
                st.dataframe(display_df, use_container_width=True)
            else:
                st.error(f"‚ùå L·ªói: S·ªë c·ªôt kh√¥ng kh·ªõp. C√≥ {len(display_df.columns)} c·ªôt nh∆∞ng ch·ªâ c√≥ {len(column_names)} t√™n")
                st.write("C√°c c·ªôt hi·ªán c√≥:", list(display_df.columns))
                st.write("T√™n c·ªôt mong mu·ªën:", column_names)
                # Hi·ªÉn th·ªã DataFrame g·ªëc n·∫øu c√≥ l·ªói
                st.dataframe(display_df, use_container_width=True)
            
            # B·∫£ng s∆° ƒë·ªì th·ªëng k√™ t·ªïng h·ª£p - K·∫øt h·ª£p c·∫£ 3 lo·∫°i
            st.subheader("üìä B·∫£ng s∆° ƒë·ªì th·ªëng k√™ t·ªïng h·ª£p - So s√°nh 3 ti√™u ch√≠")
            
            # T·∫°o DataFrame t·ªïng h·ª£p th√¥ng minh
            combined_data = []
            
            # L·∫•y top 10 t·ª´ m·ªói lo·∫°i
            top_revenue = df.nlargest(10, 'itemRevenue')
            top_sales = df.nlargest(10, 'transactions')
            top_views = df.nlargest(10, 'views') if 'views' in df.columns else pd.DataFrame()
            
            # T·∫°o set t·∫•t c·∫£ s·∫£n ph·∫©m unique
            all_products = set()
            all_products.update(top_revenue['itemName'].tolist())
            all_products.update(top_sales['itemName'].tolist())
            if not top_views.empty:
                all_products.update(top_views['itemName'].tolist())
            
            # T·∫°o d·ªØ li·ªáu t·ªïng h·ª£p cho t·ª´ng s·∫£n ph·∫©m
            for product in all_products:
                # T√¨m th√¥ng tin s·∫£n ph·∫©m trong t·ª´ng DataFrame
                revenue_info = df[df['itemName'] == product].iloc[0] if not df[df['itemName'] == product].empty else None
                revenue_rank = top_revenue[top_revenue['itemName'] == product].index.tolist()
                sales_rank = top_sales[top_sales['itemName'] == product].index.tolist()
                views_rank = top_views[top_views['itemName'] == product].index.tolist() if not top_views.empty else []
                
                if revenue_info is not None:
                    # X√°c ƒë·ªãnh lo·∫°i s·∫£n ph·∫©m
                    categories = []
                    if revenue_rank:
                        categories.append('üèÜ Doanh thu')
                    if sales_rank:
                        categories.append('üõí B√°n ch·∫°y')
                    if views_rank:
                        categories.append('üëÅÔ∏è Nhi·ªÅu view')
                    
                    category_text = ' | '.join(categories) if categories else 'üìä Kh√°c'
                    
                    combined_data.append({
                        'T√™n s·∫£n ph·∫©m': product,
                        'Doanh thu ($)': revenue_info['itemRevenue'],
                        'Giao d·ªãch': revenue_info['transactions'],
                        'Views': revenue_info.get('views', 0),
                        'H·∫°ng doanh thu': revenue_rank[0] + 1 if revenue_rank else '-',
                        'H·∫°ng b√°n ch·∫°y': sales_rank[0] + 1 if sales_rank else '-',
                        'H·∫°ng views': views_rank[0] + 1 if views_rank else '-',
                        'Lo·∫°i': category_text,
                        'T·ªïng ƒëi·ªÉm': (
                            (11 - (revenue_rank[0] + 1) if revenue_rank else 0) +
                            (11 - (sales_rank[0] + 1) if sales_rank else 0) +
                            (11 - (views_rank[0] + 1) if views_rank else 0)
                        )
                    })
            
            # T·∫°o DataFrame v√† s·∫Øp x·∫øp theo t·ªïng ƒëi·ªÉm
            combined_df = pd.DataFrame(combined_data)
            combined_df = combined_df.sort_values('T·ªïng ƒëi·ªÉm', ascending=False)
            
            # Format d·ªØ li·ªáu hi·ªÉn th·ªã
            display_df = combined_df.copy()
            display_df['Doanh thu ($)'] = display_df['Doanh thu ($)'].apply(lambda x: f"${x:,.2f}")
            display_df['T·ªïng ƒëi·ªÉm'] = display_df['T·ªïng ƒëi·ªÉm'].astype(int)
            
            # Hi·ªÉn th·ªã b·∫£ng t·ªïng h·ª£p
            st.dataframe(display_df, use_container_width=True)
            
            # Th·ªëng k√™ ph√¢n lo·∫°i
            st.subheader("üìà Th·ªëng k√™ ph√¢n lo·∫°i s·∫£n ph·∫©m")
            col1, col2, col3 = st.columns(3)
            
            with col1:
                revenue_only = len(combined_df[combined_df['Lo·∫°i'] == 'üèÜ Doanh thu'])
                st.metric("üèÜ Ch·ªâ doanh thu", revenue_only)
            
            with col2:
                sales_only = len(combined_df[combined_df['Lo·∫°i'] == 'üõí B√°n ch·∫°y'])
                st.metric("üõí Ch·ªâ b√°n ch·∫°y", sales_only)
            
            with col3:
                views_only = len(combined_df[combined_df['Lo·∫°i'] == 'üëÅÔ∏è Nhi·ªÅu view'])
                st.metric("üëÅÔ∏è Ch·ªâ nhi·ªÅu view", views_only)
            
            # S·∫£n ph·∫©m xu·∫•t hi·ªán trong nhi·ªÅu danh s√°ch
            multi_category = combined_df[combined_df['Lo·∫°i'].str.contains('\|')]
            if not multi_category.empty:
                st.success(f"üéØ S·∫£n ph·∫©m xu·∫•t hi·ªán trong nhi·ªÅu danh s√°ch: {len(multi_category)}")
                for _, row in multi_category.head(5).iterrows():
                    st.write(f"  ‚Ä¢ {row['T√™n s·∫£n ph·∫©m']} - {row['Lo·∫°i']}")
            
            # Top 5 s·∫£n ph·∫©m to√†n di·ªán nh·∫•t
            st.subheader("üèÜ Top 5 s·∫£n ph·∫©m to√†n di·ªán nh·∫•t")
            top_comprehensive = combined_df.head(5)
            for i, (_, row) in enumerate(top_comprehensive.iterrows(), 1):
                st.write(f"{i}. **{row['T√™n s·∫£n ph·∫©m']}** - ƒêi·ªÉm: {row['T·ªïng ƒëi·ªÉm']}")
                st.write(f"   Doanh thu: {row['Doanh thu ($)']} | Giao d·ªãch: {row['Giao d·ªãch']} | Views: {row['Views']}")
                st.write(f"   Lo·∫°i: {row['Lo·∫°i']}")
                st.write("---")
            
            # B·ªè qua ph·∫ßn bi·ªÉu ƒë·ªì - ch·ªâ gi·ªØ l·∫°i b·∫£ng t·ªïng h·ª£p
            
            # Th·ªëng k√™ t·ªïng quan
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üèÜ Top doanh thu cao nh·∫•t", f"${top_revenue['itemRevenue'].iloc[0]:,.2f}")
            with col2:
                st.metric("üõí Top b√°n ch·∫°y nh·∫•t", f"{top_sales['transactions'].iloc[0]:,} giao d·ªãch")
            with col3:
                if 'views' in df.columns:
                    st.metric("üëÅÔ∏è Top view nhi·ªÅu nh·∫•t", f"{top_views['views'].iloc[0]:,} views")
                else:
                    st.metric("üëÅÔ∏è Top view nhi·ªÅu nh·∫•t", "N/A")
            
            # Ph√¢n t√≠ch t∆∞∆°ng quan
            st.subheader("üìà Ph√¢n t√≠ch t∆∞∆°ng quan")
            
            # T√¨m s·∫£n ph·∫©m xu·∫•t hi·ªán trong c·∫£ 3 danh s√°ch
            top_revenue_names = set(top_revenue['itemName'].tolist())
            top_sales_names = set(top_sales['itemName'].tolist())
            top_views_names = set(top_views['itemName'].tolist()) if 'views' in df.columns else set()
            
            # S·∫£n ph·∫©m xu·∫•t hi·ªán trong c·∫£ 3 danh s√°ch
            all_three = top_revenue_names & top_sales_names & top_views_names
            revenue_and_sales = (top_revenue_names & top_sales_names) - all_three
            revenue_and_views = (top_revenue_names & top_views_names) - all_three
            sales_and_views = (top_sales_names & top_views_names) - all_three
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**üéØ S·∫£n ph·∫©m xu·∫•t hi·ªán trong nhi·ªÅu danh s√°ch:**")
                if all_three:
                    st.success(f"‚úÖ C·∫£ 3 danh s√°ch: {len(all_three)} s·∫£n ph·∫©m")
                    for product in list(all_three)[:5]:  # Hi·ªÉn th·ªã t·ªëi ƒëa 5 s·∫£n ph·∫©m
                        st.write(f"  ‚Ä¢ {product}")
                if revenue_and_sales:
                    st.info(f"üí° Doanh thu + B√°n ch·∫°y: {len(revenue_and_sales)} s·∫£n ph·∫©m")
                if revenue_and_views:
                    st.info(f"üí° Doanh thu + Nhi·ªÅu view: {len(revenue_and_views)} s·∫£n ph·∫©m")
                if sales_and_views:
                    st.info(f"üí° B√°n ch·∫°y + Nhi·ªÅu view: {len(sales_and_views)} s·∫£n ph·∫©m")
            
            with col2:
                st.markdown("**üìä Th·ªëng k√™ ph√¢n lo·∫°i:**")
                st.write(f"üèÜ Top doanh thu: {len(top_revenue_names)} s·∫£n ph·∫©m")
                st.write(f"üõí Top b√°n ch·∫°y: {len(top_sales_names)} s·∫£n ph·∫©m")
                if 'views' in df.columns:
                    st.write(f"üëÅÔ∏è Top view: {len(top_views_names)} s·∫£n ph·∫©m")
                
                # T√≠nh t·ª∑ l·ªá overlap
                if 'views' in df.columns:
                    overlap_rate = len(all_three) / min(len(top_revenue_names), len(top_sales_names), len(top_views_names)) * 100
                    st.metric("üìä T·ª∑ l·ªá overlap", f"{overlap_rate:.1f}%")
            
            # Top s·∫£n ph·∫©m chi ti·∫øt (gi·ªØ l·∫°i ƒë·ªÉ tham kh·∫£o)
            with st.expander("üìã Xem chi ti·∫øt t·ª´ng danh s√°ch"):
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.markdown("**üèÜ Top 10 Doanh thu:**")
                    for i, (_, row) in enumerate(top_revenue.iterrows(), 1):
                        st.write(f"{i}. {row['itemName']}: ${row['itemRevenue']:,.2f}")
                
                with col2:
                    st.markdown("**üõí Top 10 B√°n ch·∫°y:**")
                    for i, (_, row) in enumerate(top_sales.iterrows(), 1):
                        st.write(f"{i}. {row['itemName']}: {row['transactions']:,} giao d·ªãch")
                
                with col3:
                    if 'views' in df.columns:
                        st.markdown("**üëÅÔ∏è Top 10 Views:**")
                        for i, (_, row) in enumerate(top_views.iterrows(), 1):
                            st.write(f"{i}. {row['itemName']}: {row['views']:,} views")
                    else:
                        st.markdown("**üëÅÔ∏è Top 10 Views:**")
                        st.write("Kh√¥ng c√≥ d·ªØ li·ªáu views")
            
            # Hi·ªÉn th·ªã top trang c√≥ nhi·ªÅu view nh·∫•t (t·ª´ views_df ri√™ng bi·ªát)
            if not views_df.empty and 'views' not in df.columns:
                st.subheader("üëÅÔ∏è Top 10 trang c√≥ nhi·ªÅu view nh·∫•t")
                top_views = views_df.nlargest(10, 'views')
                for i, (_, row) in enumerate(top_views.iterrows(), 1):
                    st.write(f"{i}. **{row['itemName']}**: {row['views']:,} views")
                
                # B·∫£ng chi ti·∫øt view trang
                st.subheader("üìã Chi ti·∫øt view trang")
                display_views_df = views_df[['itemName', 'views', 'pageViews']].copy()
                display_views_df.columns = ['T√™n trang', 'Views', 'Page Views']
                st.dataframe(display_views_df, use_container_width=True)
                
                # Th·ªëng k√™ view t·ªïng quan
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("T·ªïng views", f"{views_df['views'].sum():,}")
                with col2:
                    st.metric("T·ªïng page views", f"{views_df['pageViews'].sum():,}")
                with col3:
                    st.metric("S·ªë trang c√≥ view", len(views_df[views_df['views'] > 0]))
            elif 'views' not in df.columns:
                st.subheader("üëÅÔ∏è Top trang c√≥ nhi·ªÅu view nh·∫•t")
                st.info("üí° Ch∆∞a c√≥ d·ªØ li·ªáu view trang")
            
            # Ph√¢n t√≠ch AI t·ª± ƒë·ªông
            st.markdown("---")
            st.subheader("ü§ñ Ph√¢n t√≠ch AI")
            
            # Ki·ªÉm tra API key tr∆∞·ªõc khi ph√¢n t√≠ch
            current_api_key = st.session_state.get('openai_api_key', "")
            if not current_api_key or current_api_key.strip() == "":
                st.error("‚ùå Vui l√≤ng nh·∫≠p OpenAI API key trong sidebar ƒë·ªÉ s·ª≠ d·ª•ng ph√¢n t√≠ch AI")
                st.info("üí° Nh·∫≠p API key v√† test tr∆∞·ªõc khi ph√¢n t√≠ch")
                return
            
            with st.spinner("üß† ƒêang ph√¢n t√≠ch AI..."):
                try:
                    # Chu·∫©n b·ªã d·ªØ li·ªáu cho AI
                    total_revenue = df['itemRevenue'].sum()
                    total_transactions = df['transactions'].sum()
                    
                    # T·∫°o b·∫£ng d·ªØ li·ªáu s·∫£n ph·∫©m (ch·ªâ top 20 ƒë·ªÉ gi·∫£m tokens)
                    products_data = []
                    top_products = df.nlargest(20, 'itemRevenue')  # Ch·ªâ l·∫•y top 20
                    
                    for _, row in top_products.iterrows():
                        # T√¨m th√¥ng tin view cho s·∫£n ph·∫©m n√†y (so s√°nh t√™n s·∫£n ph·∫©m)
                        view_info = views_df[views_df['itemName'].str.contains(row['itemName'], case=False, na=False)]
                        if view_info.empty:
                            # N·∫øu kh√¥ng t√¨m th·∫•y, t√¨m s·∫£n ph·∫©m c√≥ t√™n t∆∞∆°ng t·ª±
                            view_info = views_df[views_df['itemName'].str.contains(row['itemName'].split()[0], case=False, na=False)]
                        
                        views = view_info['views'].iloc[0] if not view_info.empty else 0
                        page_views = view_info['pageViews'].iloc[0] if not view_info.empty else 0
                        
                        # R√∫t g·ªçn t√™n s·∫£n ph·∫©m ƒë·ªÉ gi·∫£m tokens
                        product_name = row['itemName']
                        if len(product_name) > 50:
                            product_name = product_name[:47] + "..."
                        
                        products_data.append({
                            'T√™n s·∫£n ph·∫©m': product_name,
                            'Doanh thu': f"${row['itemRevenue']:,.2f}",
                            'Giao d·ªãch': int(row['transactions']),
                            'Views': int(views)
                        })
                    
                    # T·∫°o prompt cho AI
                    total_views = views_df['views'].sum() if not views_df.empty else 0
                    total_page_views = views_df['pageViews'].sum() if not views_df.empty else 0
                    
                    prompt = f"""Ph√¢n t√≠ch d·ªØ li·ªáu e-commerce cho store "{store_name}" ({domain}) trong {days} ng√†y:

üìä T·ªîNG QUAN: Doanh thu ${total_revenue:,.2f}, {total_transactions:,} giao d·ªãch, {total_views:,} views
üìã TOP 20 S·∫¢N PH·∫®M: {json.dumps(products_data, ensure_ascii=False)}

Ph√¢n t√≠ch:
1. üèÜ S·∫£n ph·∫©m th·∫ø m·∫°nh (doanh thu + views cao)
2. üåü S·∫£n ph·∫©m ti·ªÅm nƒÉng (nhi·ªÅu views, √≠t doanh thu)  
3. ‚ö†Ô∏è S·∫£n ph·∫©m c·∫ßn c·∫£i thi·ªán
4. üìà Khuy·∫øn ngh·ªã marketing v√† t·ªëi ∆∞u

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn."""
                    
                    # G·ªçi OpenAI API - S·ª≠ d·ª•ng API key ƒë√£ ki·ªÉm tra
                    from openai import OpenAI
                    client = OpenAI(api_key=current_api_key)
                    
                    response = client.chat.completions.create(
                        model="gpt-4o",  # S·ª≠ d·ª•ng GPT-4o (OpenAI 4.0)
                        messages=[
                            {"role": "system", "content": f"B·∫°n l√† chuy√™n gia ph√¢n t√≠ch d·ªØ li·ªáu e-commerce v·ªõi kinh nghi·ªám s√¢u v·ªÅ Google Analytics 4 v√† t·ªëi ∆∞u h√≥a doanh thu cho store {store_name}."},
                            {"role": "user", "content": prompt}
                        ],
                        temperature=0.7,
                        max_tokens=2000
                    )
                    
                    ai_analysis = response.choices[0].message.content.strip()
                    st.markdown(ai_analysis)
                    
                except Exception as e:
                    st.error(f"‚ùå L·ªói ph√¢n t√≠ch AI: {e}")
                    st.info("üí° C√≥ th·ªÉ do:")
                    st.write("- API key OpenAI kh√¥ng ƒë√∫ng ho·∫∑c h·∫øt h·∫°n")
                    st.write("- K·∫øt n·ªëi internet kh√¥ng ·ªïn ƒë·ªãnh")
                    st.write("- OpenAI service t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng")
                    st.write("**H√£y ki·ªÉm tra API key v√† th·ª≠ l·∫°i!**")
        else:
            st.markdown("---")
            st.header("üì¶ D·ªØ li·ªáu s·∫£n ph·∫©m")
            st.warning("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu s·∫£n ph·∫©m")
            st.info("üí° C√≥ th·ªÉ do:")
            st.write("- Ch∆∞a c√≥ giao d·ªãch trong th·ªùi gian n√†y")
            st.write("- Tracking ecommerce ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p")
            st.write("- Property ID kh√¥ng ƒë√∫ng")
        
        # X√≥a file t·∫°m (ch·ªâ x√≥a n·∫øu l√† file t·∫°m th·ªùi)
        if credentials_path and os.path.exists(credentials_path) and 'tmp' in credentials_path:
            try:
                os.unlink(credentials_path)
            except:
                pass

if __name__ == "__main__":
    main() 